---
description: 
globs: 
alwaysApply: true
---
# Kromka Development Standards

## 1. Core Development Principles

### 1.1 TypeScript & Code Structure
- Use TypeScript for all code implementation.
- Prefer functional programming patterns.
- File structure pattern (in order):
  1. Exports
  2. Subcomponents
  3. Helpers
  4. Static content
  5. Types

### 1.2 Naming & Organization
- Directory naming: **lowercase with dashes**  
  - ✅ `auth-wizard/`  
  - ❌ `authWizard/`
- Prefer **named exports** for components.
- Variable naming:
  - Use auxiliary verbs: `isLoading`, `hasError`, `canSubmit`
  - Use clear, descriptive names.

### 1.3 Component Architecture
- **Default to Server Components**.
- Use Client Components only for:
  - Browser API needs
  - Small, focused purposes
  - Always wrap in Suspense
- File organization:
  - Route groups for feature separation in [app/](mdc:app/)
  - Colocate components in local folders
  - Shared components in [components/](mdc:components/)

### 1.4 State Management
- **URL State:** Use `nuqs` for search parameters.
- **Server State:** Prefer Server Components.
- **Client State:** Minimize usage, isolate to client components.

### 1.5 UI Implementation
- Use **Shadcn UI** for components, **Radix UI** for primitives, **Tailwind CSS** for styling.
- Mobile-first, responsive design.
- Performance requirements:
  - Optimize LCP (Largest Contentful Paint)
  - Minimize CLS (Cumulative Layout Shift)
  - Optimize FID (First Input Delay)

### 1.6 Performance Guidelines
1. **Server Components First**
   - Default to RSC
   - Minimize 'use client' directives
   - Server-side data fetching
2. **Image Optimization**
   - Use WebP format
   - Include size attributes
   - Implement lazy loading
   - Use Next.js Image component
3. **Dynamic Loading**
   - For non-critical components, heavy third-party modules, complex UI elements
4. **Client-side Optimization**
   - Use Suspense boundaries
   - Proper error boundaries
   - Minimal client-side state

---

## 2. TypeScript Type System

### 2.1 Type vs Interface Usage

- **Use `type` for:**
  - Simple object shapes
  - Union types
  - Primitive type aliases
  - Function signatures
  - Small, single-purpose types

  ```tsx
  // Good Examples
  type ProductId = string
  type Status = 'pending' | 'success' | 'error'
  type ButtonVariant = 'primary' | 'secondary' | 'ghost'

  type ProductCardProps = {
    id: ProductId
    name: string
    price: number
  }

  type FetchProductFn = (id: ProductId) => Promise<Product>
  ```

- **Use `interface` for:**
  - Complex object structures
  - Types that might need extension
  - API responses
  - Database models
  - Class implementations
  - Shared contract definitions

  ```tsx
  // Good Examples
  interface BaseProduct {
    id: ProductId
    createdAt: Date
    updatedAt: Date
  }

  interface Product extends BaseProduct {
    name: string
    description: string
    price: number
    category: Category
    variants: ProductVariant[]
  }

  interface OrderSystem {
    createOrder(products: Product[]): Promise<Order>
    updateOrder(id: string, data: Partial<Order>): Promise<Order>
    cancelOrder(id: string): Promise<void>
  }
  ```

### 2.2 Type System Best Practices
- Use precise types over `any`.
- Leverage TypeScript utility types (`Pick`, `Omit`, `Partial`).
- Define reusable types in dedicated type files.
- Use discriminated unions for state management.

  ```tsx
  // State Management Example
  type OrderState =
    | { status: 'idle' }
    | { status: 'loading' }
    | { status: 'success'; data: Order }
    | { status: 'error'; error: string }

  // Utility Types Example
  type UpdateProductData = Partial<Omit<Product, 'id' | 'createdAt'>>
  ```

---

## 3. Implementation Examples

### 3.1 Component Structure

```tsx
// Good Example
export function ProductCard({ product }: ProductCardProps) {
  return (
    <div className="rounded-lg p-4 shadow-sm">
      <ProductImage />
      <ProductDetails />
    </div>
  )
}

// Subcomponents
function ProductImage() { /* ... */ }
function ProductDetails() { /* ... */ }

// Types
type ProductCardProps = {
  product: Product
}
```

### 3.2 Server/Client Split

```tsx
// pages/products/[id].tsx
import { Suspense } from 'react'
import { ProductDetails } from './components'

export default function ProductPage({ params }: { params: { id: string } }) {
  return (
    <Suspense fallback={<ProductSkeleton />}>
      <ProductDetails id={params.id} />
    </Suspense>
  )
}
```
```